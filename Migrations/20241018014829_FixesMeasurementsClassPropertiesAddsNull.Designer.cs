// <auto-generated />
using System;
using FitMatrix.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitMatrix.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241018014829_FixesMeasurementsClassPropertiesAddsNull")]
    partial class FixesMeasurementsClassPropertiesAddsNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FitMatrix.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("GoalBodyFatPercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("GoalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GoalRateGainImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("GoalRateGainMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("GoalRateLoseImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("GoalRateLoseMetric")
                        .HasColumnType("double precision");

                    b.Property<string>("GoalSelection")
                        .HasColumnType("text");

                    b.Property<double>("GoalWeightGainImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("GoalWeightGainMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("GoalWeightLoseImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("GoalWeightLoseMetric")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("FitMatrix.Models.Measurements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("ChestImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("ChestMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("HipsImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("HipsMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftAnkleImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftAnkleMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftBicepImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftBicepMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCalfImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftCalfMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftForearmImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftForearmMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftThighImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftThighMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftWristImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("LeftWristMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("NavelImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("NavelMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("NeckImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("NeckMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightAnkleImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightAnkleMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightBicepImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("RightBicepMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("RightCalfImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("RightCalfMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("RightForearmImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("RightForearmMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("RightThighImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("RightThighMetric")
                        .HasColumnType("double precision");

                    b.Property<double>("RightWristImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("RightWristMetric")
                        .HasColumnType("double precision");

                    b.Property<double?>("ShouldersImperial")
                        .HasColumnType("double precision");

                    b.Property<double?>("ShouldersMetric")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("WaistImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("WaistMetric")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("FitMatrix.Models.Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BodyFatPercent")
                        .HasColumnType("double precision");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DoE")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ProgressWeightImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("ProgressWeightMetric")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Progress");
                });

            modelBuilder.Entity("FitMatrix.Models.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ActivityLevel")
                        .HasColumnType("double precision");

                    b.Property<string>("ActivityLevelLabel")
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<double>("BodyFatPercent")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("HeightImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("HeightMetric")
                        .HasColumnType("double precision");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<double>("WeightImperial")
                        .HasColumnType("double precision");

                    b.Property<double>("WeightMetric")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("FitMatrix.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FitMatrix.Models.Goal", b =>
                {
                    b.HasOne("FitMatrix.Models.User", "User")
                        .WithMany("Goal")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitMatrix.Models.Measurements", b =>
                {
                    b.HasOne("FitMatrix.Models.User", "User")
                        .WithMany("Measurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitMatrix.Models.Progress", b =>
                {
                    b.HasOne("FitMatrix.Models.User", "User")
                        .WithMany("Progress")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitMatrix.Models.Stats", b =>
                {
                    b.HasOne("FitMatrix.Models.User", "User")
                        .WithMany("Stats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitMatrix.Models.User", b =>
                {
                    b.Navigation("Goal");

                    b.Navigation("Measurements");

                    b.Navigation("Progress");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
